// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package database

import (
	"context"
	"database/sql"
)

const closeSession = `-- name: CloseSession :one
UPDATE sessions
SET updated_at = DATETIME('now'),
end = ?
WHERE end = "EMPTY"
RETURNING id, profile_id, created_at, updated_at, note, start, "end"
`

func (q *Queries) CloseSession(ctx context.Context, end string) (Session, error) {
	row := q.db.QueryRowContext(ctx, closeSession, end)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Note,
		&i.Start,
		&i.End,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (profile_id, note, start)
VALUES (
	?,
	?,
	?
	)
RETURNING id, profile_id, created_at, updated_at, note, start, "end"
`

type CreateSessionParams struct {
	ProfileID int64  `json:"profile_id"`
	Note      string `json:"note"`
	Start     string `json:"start"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.ProfileID, arg.Note, arg.Start)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Note,
		&i.Start,
		&i.End,
	)
	return i, err
}

const getSessions = `-- name: GetSessions :many
SELECT id, profile_id, created_at, updated_at, note, start, "end" FROM sessions WHERE end = "EMPTY"
`

func (q *Queries) GetSessions(ctx context.Context) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, getSessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Note,
			&i.Start,
			&i.End,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSessionsWithProfile = `-- name: GetSessionsWithProfile :many
SELECT 
	s.id AS session_id,
	s.start AS session_start,
	s.end AS session_end,
	p.id AS profile_id,
	p.profile_name
FROM
	sessions AS s
LEFT JOIN 
	profiles AS p ON s.profile_id = p.id
`

type GetSessionsWithProfileRow struct {
	SessionID    int64          `json:"session_id"`
	SessionStart string         `json:"session_start"`
	SessionEnd   string         `json:"session_end"`
	ProfileID    sql.NullInt64  `json:"profile_id"`
	ProfileName  sql.NullString `json:"profile_name"`
}

func (q *Queries) GetSessionsWithProfile(ctx context.Context) ([]GetSessionsWithProfileRow, error) {
	rows, err := q.db.QueryContext(ctx, getSessionsWithProfile)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSessionsWithProfileRow
	for rows.Next() {
		var i GetSessionsWithProfileRow
		if err := rows.Scan(
			&i.SessionID,
			&i.SessionStart,
			&i.SessionEnd,
			&i.ProfileID,
			&i.ProfileName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetSessions = `-- name: ResetSessions :exec
DELETE FROM sessions
`

func (q *Queries) ResetSessions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetSessions)
	return err
}
